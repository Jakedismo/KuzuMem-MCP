---
description: 
globs: 
alwaysApply: false
---
---
description: KuzuMem-MCP Security Guardrails
globs: 
alwaysApply: true
---

# KuzuMem-MCP Security & Guardrails

## Critical Safety Rules

### 1. Branch Protection
- **NEVER** write to `main` branch unless explicitly requested by user
- Always verify branch parameter before MCP tool calls
- Each branch maintains isolated memory banks
- Cross-branch contamination is forbidden

### 2. Data Sanitization
**REFUSE** any request containing:
- API keys, passwords, tokens, or secrets
- Personal identifiable information (PII)
- Database connection strings with credentials
- SSH keys or certificates

**Response format for violations:**
```
REFUSE: Contains sensitive data that cannot be persisted
```

### 3. Client Project Isolation
- Each client project gets isolated memory storage
- Database files stored within client's project root only
- No cross-project data sharing
- `clientProjectRoot` parameter enforces isolation boundaries

## Operational Limits

### 1. Response Budget
- Maximum **800 tokens** per response
- Prioritize actionable information over verbose descriptions
- Use structured formats (JSON, tables) for efficiency

### 2. Forbidden Operations
- No shell command execution through MCP tools
- No `DROP` or `TRUNCATE` database operations
- No file writes outside `/tmp` or project directories
- No network requests from MCP tools

### 3. Memory Bank Integrity
- Validate all entity IDs before operations
- Check component dependencies before deletions
- Maintain referential integrity across graph nodes
- Log all write operations with timestamps

## Input Validation

### 1. Required Parameters
Every tool call must validate:
```json
{
  "clientProjectRoot": "/absolute/path/only",
  "repository": "alphanumeric-and-hyphens-only", 
  "branch": "valid-git-branch-name"
}
```

### 2. Entity ID Validation
- Component IDs: Must start with `comp-`
- Decision IDs: Must follow `dec-YYYYMMDD-slug` format
- Rule IDs: Must start with `rule-`
- No special characters except hyphens and underscores

### 3. Content Filtering
Before persisting any content:
1. Strip URLs with authentication parameters
2. Remove environment variable declarations
3. Sanitize file paths (no `../` traversal)
4. Validate JSON structure in metadata fields

## Error Handling

### 1. Graceful Degradation
If MCP server is unavailable:
- Respond with `[MEMORY BANK: INACTIVE]`
- Continue operation without persistence
- Do not fail the entire request

### 2. Validation Failures
For invalid parameters:
```json
{
  "error": {
    "code": -32602,
    "message": "Invalid parameter: missing clientProjectRoot"
  }
}
```

### 3. Permission Denied
For unauthorized operations:
```
REFUSE: Operation not permitted on main branch without explicit user consent
```

## Audit Requirements

### 1. Operation Logging
Log every write operation with:
- Timestamp (ISO 8601)
- Branch name
- Tool name used
- Entity IDs affected
- User context (if available)

### 2. Change Tracking
Maintain audit trail for:
- Component additions/modifications
- Decision records
- Rule updates
- Context updates

### 3. Rollback Support
- Never delete entities, mark as `deprecated` instead
- Keep historical versions for decisions
- Maintain dependency chains for rollback scenarios

## Example: Safe Tool Call

```json
{
  "tool": {
    "name": "add-component",
    "arguments": {
      "clientProjectRoot": "/workspace/project",
      "repository": "shopping-cart",
      "branch": "feature/new-checkout",
      "id": "comp-CheckoutService",
      "name": "Checkout Service",
      "kind": "service",
      "status": "active"
    }
  }
}
```

This example follows all safety rules: proper branch isolation, valid entity ID, no sensitive data, and complete required parameters.